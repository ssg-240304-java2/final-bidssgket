name: Auto delploy to NCP with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.java'
      - '**/build.gradle*'
      - '**/settings.gradle*'
      - '**/application*.yml'
      - '**.sql'


jobs:
  build:
    if: github.repository == 'ssg-240304-java2/final-bidssgket'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Set YML
        run: | # yml 파일 불러와서 수정
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > src/main/resources/application-dev.yml
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" | base64 --decode > src/main/resources/application-oauth.yml
          find src

      - name: Grant permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      - name: Docker build and publish
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: NCP SSH Login and Docker Image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          key: ${{ secrets.NCP_KEY }} # pem key
          port: ${{ secrets.NCP_PORT }} # ssh포트(22)
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm -f $(sudo docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
            sudo docker run -e TZ=Asia/Seoul -d --name ${{ vars.APP_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
            sudo docker image prune -f

